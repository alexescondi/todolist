{"version":3,"sources":["components/Item.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","props","done","Item","useState","setDone","onClick","text","HeaderContainer","Header","h1","ClearButton","button","InputContainer","TextInput","input","Button","List","inputValue","setInputValue","items","setItems","addToList","itemList","push","title","map","item","type","value","onChange","e","target","onKeyPress","key","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8dAIA,IAAMA,EAAYC,IAAOC,IAAV,KAKF,SAAAC,GAAK,OAAIA,EAAMC,KAAO,UAAY,UACxB,SAAAD,GAAK,OAAIA,EAAMC,KAAO,eAAiB,UAiB/CC,MAdf,SAAcF,GAAQ,IAAD,EACOG,mBAASH,EAAMC,MADtB,mBACVA,EADU,KACJG,EADI,KAOjB,OACI,kBAACP,EAAD,CAAWI,KAAMA,EAAMI,QAL3B,WACID,GAASH,KAKJD,EAAMM,O,o4CChBnB,IAAMT,EAAYC,IAAOC,IAAV,KAUTQ,EAAkBT,IAAOC,IAAV,KAKfS,EAASV,IAAOW,GAAV,KAKNC,EAAcZ,IAAOa,OAAV,KASXC,EAAiBd,IAAOC,IAAV,KASdc,EAAYf,IAAOgB,MAAV,KAWTC,EAASjB,IAAOa,OAAV,KAyDGK,MA7Cf,SAAchB,GAAQ,IAAD,EACmBG,mBAAS,IAD5B,mBACVc,EADU,KACEC,EADF,OAESf,mBAAS,CAC/B,CAACG,KAAM,4BAAmBL,MAAM,GAChC,CAACK,KAAK,sBACN,CAACA,KAAM,yBALM,mBAEVa,EAFU,KAEHC,EAFG,KAgBjB,SAASC,IACL,IAAMC,EAAWH,EACjBG,EAASC,KAAK,CAACjB,KAAMW,EAAYhB,MAAM,IACvCmB,EAAS,YAAIE,IACbJ,EAAc,IAUlB,OACI,kBAAC,EAAD,KACI,kBAACX,EAAD,KACI,kBAACC,EAAD,KAASR,EAAMwB,OACf,kBAACd,EAAD,CAAaL,QA1BzB,WACIe,EAAS,MAyBD,wBAEHD,EAAMM,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMpB,KAAMoB,EAAKpB,KAAML,KAAMyB,EAAKzB,UACrD,kBAACW,EAAD,KACI,kBAACC,EAAD,CAAWc,KAAK,OAAOC,MAAOX,EAAYY,SA1BtD,SAAsBC,GAClBZ,EAAcY,EAAEC,OAAOH,QAyBmDI,WAf9E,SAAuBF,GAInB,MAHc,UAAVA,EAAEG,KACFZ,IAEG,QAYC,kBAACN,EAAD,CAAQV,QAASgB,GAAjB,QC7FDa,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAMX,MAAM,+BCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.954b9dc9.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    background: #343744;\n    border-radius: 10px;\n    padding: 14px;\n    margin-bottom: 7px;\n    color: ${props => props.done ? '#1fd84d' : 'auto'};\n    text-decoration: ${props => props.done ? 'line-through' : 'auto'};\n`\n\nfunction Item(props) {\n    const [done, setDone] = useState(props.done);\n\n    function toggleDone() {\n        setDone(!done);\n    }\n\n    return(\n        <Container done={done} onClick={toggleDone}>\n            {props.text}\n        </Container>\n    );\n}\n\nexport default Item;\n","import React, { useState } from 'react';\nimport '../App.css';\n\nimport Item from './Item';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    background: #2b2e39;\n    margin: 0 auto;\n    width: 80%;\n    max-width:600px;\n    padding: 14px;\n    border-radius: 14px;\n    margin-top: 14px;\n`\n\nconst HeaderContainer = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nconst Header = styled.h1`\n    color: #fff;\n    font-weight: 500;\n`\n\nconst ClearButton = styled.button`\n    color: #fff;\n    background: red;\n    border-radius: 10px;\n    height: 22px;\n    align-self: center;\n    margin: 20px;\n`\n\nconst InputContainer = styled.div`\n    display: flex;\n    justify-content: space-between;\n    border: 2px solid #343744;\n    background: #232632;\n    border-radius: 10px;\n    padding: 5px;\n`\n\nconst TextInput = styled.input`\n    padding: 5px;\n    font-size: 14px;\n    background: #232632;\n    color: #d3d4d6;\n    width: 100%;\n    margin-right: 7px;\n    border: 0px;\n    -webkit-appearance: none;\n`\n\nconst Button = styled.button`\n    background: #232632;\n    color: #00a7fa;\n    width: 80px;\n    height: 32px;\n    font-size: 1.7em;\n    border: 0px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nfunction List(props) {  \n    const [inputValue, setInputValue] = useState('');\n    const [items, setItems] = useState([\n        {text: 'Wyrzucić śmieci', done: true},\n        {text:'Zrobić pranie'},\n        {text: 'Kupić pieczywo'},\n    ]);\n\n    function clearAll() {\n        setItems([]);\n    }\n\n    function handleChange(e) {\n        setInputValue(e.target.value);\n    }\n\n    function addToList() {\n        const itemList = items;\n        itemList.push({text: inputValue, done: false});\n        setItems([...itemList]);\n        setInputValue('');\n    }\n\n    function submitIfEnter(e) {\n        if (e.key === 'Enter') {\n            addToList();\n        };\n        return null;\n    }\n    \n    return(\n        <Container>\n            <HeaderContainer>\n                <Header>{props.title}</Header>\n                <ClearButton onClick={clearAll}>Usuń wszystkie</ClearButton>\n            </HeaderContainer>\n            {items.map(item => <Item text={item.text} done={item.done} />)}\n            <InputContainer>\n                <TextInput type=\"text\" value={inputValue} onChange={handleChange} onKeyPress={submitIfEnter} />\n                <Button onClick={addToList}>+</Button>\n            </InputContainer>\n        </Container>\n    );\n}\n\nexport default List;\n","import React from 'react';\nimport './App.css';\n\nimport List from './components/List';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List title='Lista spraw do zrobienia' />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}